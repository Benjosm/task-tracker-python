"""\nTask Manager - A simple command-line task management application\n\nThis module contains the main TaskManager class that handles operations\non tasks such as adding, listing, and marking tasks as complete.\n"""\nimport datetime\nimport json\nimport os\nfrom .task import Task  # Relative import\nfrom .task_storage import TaskStorage\n\n\nclass TaskManager:\n    """Manages task operations for the application."""\n\n    def __init__(self, storage_path="tasks.json"):\n        """Initialize the TaskManager with a storage path.\n\n        Args:\n            storage_path (str): Path to the task storage file.\n        """\n        self.storage = TaskStorage(storage_path)\n        self.tasks = self.storage.load_tasks()\n\n    def add_task(self, title, description="", due_date=None, priority="medium"):\n        """Add a new task to the task list.\n\n        Args:\n            title (str): Task title\n            description (str, optional): Task description. Defaults to empty string.\n            due_date (str, optional): Due date in format YYYY-MM-DD. Defaults to None.\n            priority (str, optional): Task priority (low, medium, high). Defaults to "medium".\n\n        Returns:\n            Task: The newly created task object\n        """\n        if due_date:\n            try:\n                due_date = datetime.datetime.strptime(due_date, "%Y-%m-%d").date()\n            except ValueError:\n                raise ValueError("Due date must be in the format YYYY-MM-DD")\n\n        task = Task(\n            title=title,\n            description=description,\n            due_date=due_date,\n            priority=priority\n        )\n        self.tasks.append(task)\n        self.storage.save_tasks(self.tasks)\n        return task\n\n    def list_tasks(self, show_completed=False):\n        """List all tasks, with option to include or exclude completed tasks.\n\n        Args:\n            show_completed (bool, optional): Whether to include completed tasks. Defaults to False.\n\n        Returns:\n            list: List of tasks matching the criteria\n        """\n        if show_completed:\n            return self.tasks\n        return [task for task in self.tasks if not task.completed]\n\n    def complete_task(self, task_id):\n        """Mark a task as completed.\n\n        Args:\n            task_id (str): The ID of the task to mark as completed\n\n        Returns:\n            bool: True if the task was found and marked as completed, False otherwise\n        """\n        for task in self.tasks:\n            if task.id == task_id:\n                task.completed = True\n                task.completed_date = datetime.date.today()\n                self.storage.save_tasks(self.tasks)\n                return True\n        return False\n\n    def delete_task(self, task_id):\n        """Delete a task.\n\n        Args:\n            task_id (str): The ID of the task to delete\n\n        Returns:\n            bool: True if the task was found and deleted, False otherwise\n        """\n        for index, task in enumerate(self.tasks):\n            if task.id == task_id:\n                del self.tasks[index]\n                self.storage.save_tasks(self.tasks)\n                return True\n        return False\n\n    def get_task_by_id(self, task_id):\n        """Find a task by its ID.\n\n        Args:\n            task_id (str): The ID of the task to find\n\n        Returns:\n            Task: The task with the matching ID, or None if not found\n        """\n        for task in self.tasks:\n            if task.id == task_id:\n                return task\n        return None\n\n    def get_statistics(self):\n        """Get statistics about tasks.\n\n        Returns:\n            dict: Dictionary with task statistics\n        """\n        total = len(self.tasks)\n        completed = sum(1 for task in self.tasks if task.completed)\n        pending = total - completed\n\n        priorities = {"low": 0, "medium": 0, "high": 0}\n        for task in self.tasks:\n            if task.priority in priorities:\n                priorities[task.priority] += 1\n\n        return {\n            "total": total,\n            "completed": completed,\n            "pending": pending,\n            "priorities": priorities\n        }\n